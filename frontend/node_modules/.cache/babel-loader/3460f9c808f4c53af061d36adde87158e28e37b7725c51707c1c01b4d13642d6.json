{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '@/plugins/axios';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'MyInfoView',\n  data() {\n    return {\n      form: {\n        avatarFile: null,\n        avatarPreview: null,\n        email: '',\n        username: '',\n        gender: null,\n        birthDate: '',\n        height: null,\n        weight: null,\n        targetWeight: null,\n        checkedUsername: false\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      profile: state => state.user.profile // modules/user.js 의 profile\n    })\n  },\n  created() {\n    if (this.profile) this.fillForm(this.profile);else {\n      // 만약 store.profile 이 없다면 API 로드\n      this.fetchProfile();\n    }\n  },\n  methods: {\n    async fetchProfile() {\n      try {\n        const res = await axios.get('/api/users/me');\n        this.fillForm(res.data);\n      } catch (e) {\n        console.error(e);\n        alert('회원 정보를 불러오는 데 실패했습니다.');\n      }\n    },\n    fillForm(u) {\n      this.form.email = u.email;\n      this.form.username = u.username;\n      this.form.gender = u.gender;\n      this.form.birthDate = u.birthDate;\n      this.form.height = u.height;\n      this.form.weight = u.weight;\n      this.form.targetWeight = u.targetWeight;\n      // avatarUrl 필드를 프로필에 담았다면:\n      if (u.avatarUrl) this.form.avatarPreview = u.avatarUrl;\n    },\n    // 파일 선택창 열기\n    triggerFile() {\n      this.$refs.avatar.click();\n    },\n    // 아바타 파일 변경\n    onAvatarChange(e) {\n      const file = e.target.files[0];\n      if (!file) return;\n      this.form.avatarFile = file;\n      this.form.avatarPreview = URL.createObjectURL(file);\n    },\n    // 닉네임 중복 확인\n    async checkUsername() {\n      if (!this.form.username) {\n        return alert('닉네임을 입력해주세요.');\n      }\n      try {\n        await axios.get('/api/users/check-username', {\n          params: {\n            username: this.form.username\n          }\n        });\n        alert('사용 가능한 닉네임입니다.');\n        this.form.checkedUsername = true;\n      } catch {\n        alert('이미 사용 중인 닉네임입니다.');\n        this.form.checkedUsername = false;\n      }\n    },\n    // 저장\n    async updateProfile() {\n      if (!this.form.checkedUsername) {\n        return alert('닉네임 중복 검사를 해주세요.');\n      }\n      const payload = new FormData();\n      payload.append('username', this.form.username);\n      payload.append('gender', this.form.gender);\n      payload.append('birthDate', this.form.birthDate);\n      payload.append('height', this.form.height);\n      payload.append('weight', this.form.weight);\n      payload.append('targetWeight', this.form.targetWeight);\n      if (this.form.avatarFile) {\n        payload.append('avatar', this.form.avatarFile);\n      }\n      try {\n        await axios.put('/api/users/me', payload, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        alert('정보가 업데이트되었습니다.');\n        this.$router.push({\n          name: 'HomeLoginView'\n        });\n      } catch (e) {\n        console.error(e);\n        alert('업데이트에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","mapState","name","data","form","avatarFile","avatarPreview","email","username","gender","birthDate","height","weight","targetWeight","checkedUsername","computed","profile","state","user","created","fillForm","fetchProfile","methods","res","get","e","console","error","alert","u","avatarUrl","triggerFile","$refs","avatar","click","onAvatarChange","file","target","files","URL","createObjectURL","checkUsername","params","updateProfile","payload","FormData","append","put","headers","$router","push"],"sources":["C:\\Users\\SSAFY\\Desktop\\YamYamCoach\\frontend\\src\\views\\MyInfoView.vue"],"sourcesContent":["<template>\r\n  <main class=\"pt-4 pb-5\">\r\n    <div class=\"container\" style=\"max-width: 600px\">\r\n      <!-- 뒤로가기 + 제목 -->\r\n      <div class=\"d-flex align-items-center mb-4\">\r\n        <router-link to=\"/\" class=\"me-3 text-decoration-none text-dark\">\r\n          <i class=\"bi bi-arrow-left fs-4\"></i>\r\n        </router-link>\r\n        <h4 class=\"mb-0\">개인정보 수정</h4>\r\n      </div>\r\n\r\n      <!-- 아바타 -->\r\n      <div class=\"d-flex justify-content-center mb-4\">\r\n        <div class=\"position-relative\">\r\n          <img\r\n            :src=\"form.avatarPreview || '/default-avatar.png'\"\r\n            class=\"rounded-circle border\"\r\n            width=\"100\"\r\n            height=\"100\"\r\n            alt=\"avatar\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-light position-absolute bottom-0 end-0 p-1 shadow-sm\"\r\n            @click=\"triggerFile\"\r\n          >\r\n            <i class=\"bi bi-camera-fill\"></i>\r\n          </button>\r\n          <input\r\n            ref=\"avatar\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            class=\"d-none\"\r\n            @change=\"onAvatarChange\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <form @submit.prevent=\"updateProfile\">\r\n        <!-- 기본 정보 섹션 -->\r\n        <h6 class=\"mb-3\">기본 정보</h6>\r\n        <div class=\"card mb-4 p-3\">\r\n          <!-- 이메일 (읽기 전용) -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">이메일 주소</label>\r\n            <input\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              v-model=\"form.email\"\r\n              readonly\r\n            />\r\n          </div>\r\n\r\n          <!-- 닉네임 -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">닉네임</label>\r\n            <div class=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                v-model=\"form.username\"\r\n                required\r\n              />\r\n              <button\r\n                class=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                @click=\"checkUsername\"\r\n              >\r\n                중복 확인\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 성별 -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label d-block\">성별</label>\r\n            <div class=\"btn-group\" role=\"group\">\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"gender\"\r\n                id=\"male\"\r\n                :value=\"false\"\r\n                v-model=\"form.gender\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <label class=\"btn btn-outline-secondary\" for=\"male\">남성</label>\r\n\r\n              <input\r\n                type=\"radio\"\r\n                class=\"btn-check\"\r\n                name=\"gender\"\r\n                id=\"female\"\r\n                :value=\"true\"\r\n                v-model=\"form.gender\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <label class=\"btn btn-outline-secondary\" for=\"female\">여성</label>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 생년월일 -->\r\n          <div class=\"mb-0\">\r\n            <label class=\"form-label\">생년월일</label>\r\n            <input\r\n              type=\"date\"\r\n              class=\"form-control\"\r\n              v-model=\"form.birthDate\"\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 추가 정보 섹션 -->\r\n        <h6 class=\"mb-3\">추가 정보</h6>\r\n        <div class=\"card mb-4 p-3\">\r\n          <!-- 키 -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">키 (cm)</label>\r\n            <input\r\n              type=\"number\"\r\n              class=\"form-control\"\r\n              v-model.number=\"form.height\"\r\n              min=\"0\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <!-- 현재 체중 -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">현재 체중 (kg)</label>\r\n            <input\r\n              type=\"number\"\r\n              class=\"form-control\"\r\n              v-model.number=\"form.weight\"\r\n              min=\"0\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <!-- 목표 체중 -->\r\n          <div class=\"mb-0\">\r\n            <label class=\"form-label\">목표 체중 (kg)</label>\r\n            <input\r\n              type=\"number\"\r\n              class=\"form-control\"\r\n              v-model.number=\"form.targetWeight\"\r\n              min=\"0\"\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 저장/취소 버튼 -->\r\n        <div class=\"d-flex justify-content-center gap-3\">\r\n          <button type=\"submit\" class=\"btn btn-primary px-5\">저장</button>\r\n          <router-link to=\"/\" class=\"btn btn-outline-secondary px-5\"\r\n            >취소</router-link\r\n          >\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nimport axios from '@/plugins/axios';\r\nimport { mapState } from 'vuex';\r\n\r\nexport default {\r\n  name: 'MyInfoView',\r\n  data() {\r\n    return {\r\n      form: {\r\n        avatarFile: null,\r\n        avatarPreview: null,\r\n        email: '',\r\n        username: '',\r\n        gender: null,\r\n        birthDate: '',\r\n        height: null,\r\n        weight: null,\r\n        targetWeight: null,\r\n        checkedUsername: false,\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      profile: (state) => state.user.profile, // modules/user.js 의 profile\r\n    }),\r\n  },\r\n  created() {\r\n    if (this.profile) this.fillForm(this.profile);\r\n    else {\r\n      // 만약 store.profile 이 없다면 API 로드\r\n      this.fetchProfile();\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchProfile() {\r\n      try {\r\n        const res = await axios.get('/api/users/me');\r\n        this.fillForm(res.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('회원 정보를 불러오는 데 실패했습니다.');\r\n      }\r\n    },\r\n    fillForm(u) {\r\n      this.form.email = u.email;\r\n      this.form.username = u.username;\r\n      this.form.gender = u.gender;\r\n      this.form.birthDate = u.birthDate;\r\n      this.form.height = u.height;\r\n      this.form.weight = u.weight;\r\n      this.form.targetWeight = u.targetWeight;\r\n      // avatarUrl 필드를 프로필에 담았다면:\r\n      if (u.avatarUrl) this.form.avatarPreview = u.avatarUrl;\r\n    },\r\n\r\n    // 파일 선택창 열기\r\n    triggerFile() {\r\n      this.$refs.avatar.click();\r\n    },\r\n    // 아바타 파일 변경\r\n    onAvatarChange(e) {\r\n      const file = e.target.files[0];\r\n      if (!file) return;\r\n      this.form.avatarFile = file;\r\n      this.form.avatarPreview = URL.createObjectURL(file);\r\n    },\r\n\r\n    // 닉네임 중복 확인\r\n    async checkUsername() {\r\n      if (!this.form.username) {\r\n        return alert('닉네임을 입력해주세요.');\r\n      }\r\n      try {\r\n        await axios.get('/api/users/check-username', {\r\n          params: { username: this.form.username },\r\n        });\r\n        alert('사용 가능한 닉네임입니다.');\r\n        this.form.checkedUsername = true;\r\n      } catch {\r\n        alert('이미 사용 중인 닉네임입니다.');\r\n        this.form.checkedUsername = false;\r\n      }\r\n    },\r\n\r\n    // 저장\r\n    async updateProfile() {\r\n      if (!this.form.checkedUsername) {\r\n        return alert('닉네임 중복 검사를 해주세요.');\r\n      }\r\n      const payload = new FormData();\r\n      payload.append('username', this.form.username);\r\n      payload.append('gender', this.form.gender);\r\n      payload.append('birthDate', this.form.birthDate);\r\n      payload.append('height', this.form.height);\r\n      payload.append('weight', this.form.weight);\r\n      payload.append('targetWeight', this.form.targetWeight);\r\n      if (this.form.avatarFile) {\r\n        payload.append('avatar', this.form.avatarFile);\r\n      }\r\n\r\n      try {\r\n        await axios.put('/api/users/me', payload, {\r\n          headers: { 'Content-Type': 'multipart/form-data' },\r\n        });\r\n        alert('정보가 업데이트되었습니다.');\r\n        this.$router.push({ name: 'HomeLoginView' });\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('업데이트에 실패했습니다.');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.hero {\r\n  min-height: 0; /* 기존 Hero 가 있다면 제거 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}