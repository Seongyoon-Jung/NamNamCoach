package com.yamyam.controller;


import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.yamyam.dto.request.LoginRequest;
import com.yamyam.service.AuthService;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("/api/auth")
public class AuthController {

	// 생성자 주입
	private final AuthenticationManager authenticationManager;
    public AuthController(AuthenticationManager authenticationManager) {
        this.authenticationManager = authenticationManager;
    }

	@PostMapping("/login")
	public String login(@RequestBody LoginRequest loginDto) {
		System.out.println(loginDto);
		try {
            // 1. 인증 토큰 생성
            UsernamePasswordAuthenticationToken token =
                new UsernamePasswordAuthenticationToken(loginDto.getEmail(), loginDto.getPassword());

            // 2. 인증 처리
            Authentication authentication = authenticationManager.authenticate(token);

            // 3. 인증 성공 시 (SecurityContext에 자동 저장되진 않음 — 직접 저장하려면 SecurityContextHolder 사용)
            System.out.println("인증 성공: " + authentication.getName());

            return "login success";
        } catch (AuthenticationException e) {
            System.out.println("인증 실패: " + e.getMessage());
            return "login fail";
        }

	}
	
	@PostMapping("/logout")
	public String logout() {
		return "logout";
	}
}
